name: Handle CodeQL Scan Results

on:
  # pull_request: 
  #   types: [opened, reopened]
  workflow_run:
    workflows: ["CodeQL"]
    # workflows: ["CodeQL test"]
    types:
      - completed
      
permissions:
  issues: write
  pull-requests: write
  security-events: write

jobs:
  handle_codeql_scan:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && toJSON(github.event.workflow_run.pull_requests) != '[]' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare Environment
        run: |
          
          # ls -lah
          env
          echo "github.event_name" is ${{ github.event_name }}
          echo "github.event.workflow_run.event" is ${{ github.event.workflow_run.event }}
          echo "github.event.workflow_run.conclusion" is ${{ github.event.workflow_run.conclusion }}
          echo "github.event.workflow_run.head_sha" is ${{ github.event.workflow_run.head_sha }}
          echo "github.event.workflow_run.head_commit.id" is ${{ github.event.workflow_run.head_commit.id }}
          echo "github.event.workflow_run.triggering_actor.url" is ${{ github.event.workflow_run.url }} 
          echo "github.event.workflow_run.pull_requests" is ${{ github.event.workflow_run.pull_requests }} 
          echo "github.event.workflow_run.pull_requests.head.sha" is ${{ github.event.workflow_run.pull_requests.head.sha }} 
          echo "github.event.workflow_run.pull_requests.head.sha" is ${{ github.event.workflow_run.pull_requests.head.sha }} 

          echo "$PR_CONTEXT"

          head_sha=${{ github.event.workflow_run.head_sha }}
          echo "head_sha=$head_sha"
          URL=$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/code-scanning/analyses
          echo "analyses list URL=$URL"
          response=$(curl -H "Authorization: Bearer $GITHUB_TOKEN" $URL)
          echo length of response=$#{response}
          # echo response for analyses list
          # echo $response | jq '.'
          ids=$(echo "$response" | jq -r --arg sha "$head_sha" '.[] | select(.commit_sha == $sha) | .id')
          echo ids=$ids
          
          if [ -z "$ids" ]; then
            echo "Error: No matching IDs found for the given head SHA $head_sha." >&2
            exit 1
          fi

          echo Initialize sarif_output.json with the base structure
          echo '{
          	"runs": [],
          	"version": "2.1.0"
          }' > sarif_output.json
          cat sarif_output.json
          
          # Loop through each ID
          for id in $ids; do
            echo "Found Analysis ID: $id"
          
            # Fetch the SARIF response
            sarif_response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/sarif+json" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/code-scanning/analyses/$id")
            echo length of sarif_response=${#sarif_response}
            # echo sarif content:
            # echo $sarif_response | jq '.'

            # Save the response to a temporary file
            echo "$sarif_response" > current_sarif.json
            
            # Combine the current sarif_output.json with the new SARIF response
            jq -s '{"version": "2.1.0", "runs": (.[0].runs + .[1].runs)}' sarif_output.json current_sarif.json > temp_sarif_output.json
          
            # Move the temporary file to sarif_output.json
            mv temp_sarif_output.json sarif_output.json
            echo sarif_output.json size=$(stat -c%s sarif_output.json)
          done

          ls -l
          # cat sarif_output.json

          REPO=$(git remote get-url origin)
          REPO=${REPO%".git"}
          SCANNER=codeql
          PR_NUMBER=$(echo $PR_CONTEXT | jq '.[0].number')
          GITHUB_HEAD_REF=$(echo $PR_CONTEXT | jq -r '.[0].head.ref')
          #GITHUB_HEAD_REF=$(curl --header 'authorization: Bearer ${{ inputs.github-token }}' -s ${{github.event.issue.pull_request.url }} | jq -r '.head.ref')
          GITHUB_SHA=$head_sha
          echo REPO: $REPO
          echo GITHUB_HEAD_REF: $GITHUB_HEAD_REF
          echo GITHUB_SHA: $GITHUB_SHA
          echo PR_NUMBER: $PR_NUMBER
          OUT=$(npx --yes mobbdev@latest review  -r $REPO --ref $GITHUB_HEAD_REF --ch $GITHUB_SHA --api-key ${{ secrets.MOBB_API_TOKEN }} -f sarif_output.json  --pr $PR_NUMBER --github-token ${{ secrets.GITHUB_TOKEN }} --scanner $SCANNER)
          RETVAL=$?
          if [ $RETVAL -ne 0 ]; then
            exit $RETVAL
          fi
          OUT=$(echo $OUT | tr '\n' ' ')
          echo "fix-report-url=$OUT" >> $GITHUB_OUTPUT
          echo "Mobb URL: $OUT"
          
         
          
        env:
            PR_CONTEXT: ${{ toJson(github.event.workflow_run.pull_requests) }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash -l {0}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: my-artifact
          path: sarif_output.json

      
      
       
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

